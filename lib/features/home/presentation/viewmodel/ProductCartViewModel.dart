import 'package:flutter/material.dart';
import 'package:vedika_healthcare/core/auth/data/services/StorageService.dart';
import 'package:vedika_healthcare/features/home/data/models/ProductCart.dart';
import 'package:vedika_healthcare/features/home/data/services/ProductCartService.dart';
import 'package:flutter/foundation.dart';
import 'package:provider/provider.dart';
import 'package:vedika_healthcare/features/medicineDelivery/presentation/viewmodel/CartAndPlaceOrderViewModel.dart';

class ProductCartViewModel extends ChangeNotifier {
  final ProductCartService _cartService;
  bool _isLoading = false;
  String? _error;
  ProductCart? _lastAddedItem;
  bool _isInCart = false;

  ProductCartViewModel(this._cartService);

  bool get isLoading => _isLoading;
  String? get error => _error;
  ProductCart? get lastAddedItem => _lastAddedItem;
  bool get isInCart => _isInCart;

  Future<void> checkCartStatus(String productId) async {
    print('Checking cart status in ViewModel for productId: $productId');
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      _isInCart = await _cartService.checkProductInCart(productId);
      print('Cart status updated in ViewModel. isInCart: $_isInCart');
    } catch (e) {
      print('Error in ViewModel checkCartStatus: $e');
      _error = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addToCart({
    required String productId,
    required int quantity,
    required BuildContext context,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      String? userId = await StorageService.getUserId();

      // Create ProductCart object
      final cartItem = ProductCart(
        cartId: '', // This will be generated by the backend
        userId: userId!,
        productId: productId,
        quantity: quantity,
        addedAt: DateTime.now(),
      );

      // Pass the ProductCart object to the service
      _lastAddedItem = await _cartService.addToCart(cartItem: cartItem);
      _isInCart = true;

      // Update CartAndPlaceOrderViewModel
      final cartViewModel = Provider.of<CartAndPlaceOrderViewModel>(context, listen: false);
      await cartViewModel.fetchOrdersAndCartItems(); // This will update the total count
      
      print('✅ Product added to cart and count updated');
    } catch (e) {
      print('❌ Error adding to cart: $e');
      _error = e.toString();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void clearError() {
    _error = null;
    notifyListeners();
  }
} 
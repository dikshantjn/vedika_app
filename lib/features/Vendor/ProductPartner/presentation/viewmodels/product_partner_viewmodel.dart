import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:vedika_healthcare/features/Vendor/ProductPartner/data/models/product_partner_model.dart';
import 'package:vedika_healthcare/features/Vendor/ProductPartner/data/services/product_partner_service.dart';
import 'package:vedika_healthcare/features/Vendor/Registration/Models/Vendor.dart';

class ProductPartnerViewModel extends ChangeNotifier {
  final _logger = Logger();
  final _service = ProductPartnerService();

  // Controllers
  final companyLegalNameController = TextEditingController();
  final brandNameController = TextEditingController();
  final gstNumberController = TextEditingController();
  final panCardNumberController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  final confirmPasswordController = TextEditingController();
  final phoneNumberController = TextEditingController();
  final addressController = TextEditingController();
  final pincodeController = TextEditingController();
  final cityController = TextEditingController();
  final stateController = TextEditingController();
  final bankAccountNumberController = TextEditingController();
  final locationController = TextEditingController();

  // License Controllers
  final licenseNumberController = TextEditingController();
  final licenseExpiryController = TextEditingController();

  // State variables
  String? profilePicture;
  List<Map<String, String>> licenseDetails = [];
  bool isLoading = false;
  String? error;
  List<String> _validationErrors = [];

  void addLicense(String name, String number, String expiryDate, String filePath) {
    licenseDetails.add({
      'name': name,
      'number': number,
      'expiry': expiryDate,
      'filePath': filePath,
    });
    notifyListeners();
  }

  void removeLicense(int index) {
    if (index >= 0 && index < licenseDetails.length) {
      licenseDetails.removeAt(index);
      notifyListeners();
    }
  }

  void setProfilePicture(String path) {
    profilePicture = path;
    notifyListeners();
  }

  bool _validateForm() {
    _validationErrors = [];
    if (companyLegalNameController.text.isEmpty) {
      _validationErrors.add('Company legal name is required');
    }
    if (brandNameController.text.isEmpty) {
      _validationErrors.add('Brand name is required');
    }
    if (emailController.text.isEmpty) {
      _validationErrors.add('Email is required');
    }
    if (passwordController.text.isEmpty) {
      _validationErrors.add('Password is required');
    }
    if (confirmPasswordController.text != passwordController.text) {
      _validationErrors.add('Passwords do not match');
    }
    if (gstNumberController.text.isEmpty) {
      _validationErrors.add('GST number is required');
    }
    if (panCardNumberController.text.isEmpty) {
      _validationErrors.add('PAN card number is required');
    }
    if (addressController.text.isEmpty) {
      _validationErrors.add('Address is required');
    }
    if (pincodeController.text.isEmpty) {
      _validationErrors.add('Pincode is required');
    }
    if (cityController.text.isEmpty) {
      _validationErrors.add('City is required');
    }
    if (stateController.text.isEmpty) {
      _validationErrors.add('State is required');
    }
    if (bankAccountNumberController.text.isEmpty) {
      _validationErrors.add('Bank account number is required');
    }
    if (locationController.text.isEmpty) {
      _validationErrors.add('Location is required');
    }
    if (phoneNumberController.text.isEmpty) {
      _validationErrors.add('Contact number is required');
    }
    if (licenseDetails.isEmpty) {
      _validationErrors.add('At least one license is required');
    }

    if (_validationErrors.isNotEmpty) {
      _logger.w('Validation Errors: ${_validationErrors.toString()}');
    }

    return _validationErrors.isEmpty;
  }

  Future<void> register() async {
    try {
      if (!_validateForm()) {
        throw Exception(_validationErrors.join('\n'));
      }

      // Create Vendor model
      final vendor = Vendor(
        vendorRole: 8, // Product Partner vendor role
        phoneNumber: phoneNumberController.text,
        email: emailController.text,
        password: passwordController.text,
        generatedId: '', // This will be generated by the backend
      );

      final productPartner = ProductPartner(
        password: passwordController.text,
        companyLegalName: companyLegalNameController.text,
        brandName: brandNameController.text,
        gstNumber: gstNumberController.text,
        panCardNumber: panCardNumberController.text,
        licenseDetails: licenseDetails,
        address: addressController.text,
        pincode: pincodeController.text,
        city: cityController.text,
        state: stateController.text,
        email: emailController.text,
        bankAccountNumber: bankAccountNumberController.text,
        profilePicture: profilePicture ?? '',
        location: locationController.text,
        phoneNumber: phoneNumberController.text,
      );

      await _service.registerProductPartner(productPartner, vendor);
      clearForm();
    } catch (e) {
      _logger.e('Registration failed: ${e.toString()}');
      rethrow;
    }
  }

  void clearForm() {
    companyLegalNameController.clear();
    brandNameController.clear();
    emailController.clear();
    passwordController.clear();
    confirmPasswordController.clear();
    gstNumberController.clear();
    panCardNumberController.clear();
    addressController.clear();
    stateController.clear();
    cityController.clear();
    pincodeController.clear();
    locationController.clear();
    bankAccountNumberController.clear();
    phoneNumberController.clear();
    profilePicture = null;
    licenseDetails.clear();
    error = null;
    _validationErrors = [];
    notifyListeners();
  }

  @override
  void dispose() {
    companyLegalNameController.dispose();
    brandNameController.dispose();
    gstNumberController.dispose();
    panCardNumberController.dispose();
    emailController.dispose();
    passwordController.dispose();
    confirmPasswordController.dispose();
    phoneNumberController.dispose();
    addressController.dispose();
    pincodeController.dispose();
    cityController.dispose();
    stateController.dispose();
    bankAccountNumberController.dispose();
    locationController.dispose();
    licenseNumberController.dispose();
    licenseExpiryController.dispose();
    super.dispose();
  }
} 